cmake_minimum_required (VERSION 2.8)
project (sample_assignment)

###################################################################################

# these variables will be replaced by INSTALL.sh
set (SUBMITTY_INSTALL_DIR __INSTALL__FILLIN__SUBMITTY_INSTALL_DIR__)
set (SUBMITTY_DATA_DIR __INSTALL__FILLIN__SUBMITTY_DATA_DIR__)

# assuming the core files for config, compilation, running, & grading are here:
set (GRADINGCODE  ${SUBMITTY_INSTALL_DIR}/src)
set (GRADINGLIB   ${SUBMITTY_INSTALL_DIR}/src/grading/lib/libsubmitty_grading.a)

###################################################################################

# DEFAULT:  NORMAL ASSIGNMENT INSTALLATION
# NON-DEFAULT:  TEST SUITE INSTALLATION
option(ASSIGNMENT_INSTALLATION "Normal assignment installation" ON)

set (MY_DIR ${CMAKE_SOURCE_DIR})

IF (ASSIGNMENT_INSTALLATION)
  # assuming we are in a directory of this structure
  #   SUBMITTY_DATA_DIR/courses/which_semester/which_course/build/which_assignment

  # base directory for course
  set (course_dir ${MY_DIR}/../..)
  #alternately/equivalently
  #set (course_dir ${SUBMITTY_DATA_DIR}/courses)

  # just the last part of the current directory
  get_filename_component(assignment ${MY_DIR} NAME)
  message("ASSIGNMENT IS ${assignment}")
  string(TIMESTAMP mytime "%Y/%m/%d %H:%M:%S")
  message("BUILD TIME IS ${mytime}")

  set (my_config_json ${course_dir}/build/${assignment}/config.json)
  set (my_config_json_no_comments ${course_dir}/build/${assignment}/config_no_comments.json)

  # Where the compiled binaries are stored, under the class directory
  set(my_bin ${course_dir}/bin/${assignment})

  # Assignment configuration json file location
  set(my_hw_config_file ${course_dir}/config/build/build_${assignment}.json)

else (ASSIGNMENT_INSTALLATION)
  # Otherwise, this is part of the test suite....
  # base directory for test suite is the immediate parent directory
  get_filename_component(which_test_dir ${MY_DIR} DIRECTORY)

  # the name of the test is the name of the parent directory
  get_filename_component(which_test ${which_test_dir} NAME)
  message("WHICH TEST: ${which_test}")
  
  include_directories(${which_test_dir}/assignment_config)

  set (my_config_json ${which_test_dir}/assignment_config/config.json)
  set (my_config_json_no_comments ${which_test_dir}/assignment_config/config_no_comments.json)

  # Where the compiled binaries are stored
  set(my_bin ${which_test_dir}/bin)
  message("this is where i'll put the executables ${my_bin}")

  # configuration json file location
  # set(my_hw_config_file ${which_test_dir}/data/assignment_config.json)
  set(my_hw_config_file ${which_test_dir}/data/build_config.json)

endif(ASSIGNMENT_INSTALLATION)


###################################################################################
# OPTIONAL INSTRUCTOR CUSTOMIZATION 
#
# If extra .cpp files are needed for grading/validation, add a file
#  named "instructor_CMakeLists.txt" and in that file list the .cpp
#  files in the variable "custom_files".  For example:
#
#  set (custom_files   custom_validation_code/custom.cpp  custom_validation_code/helper.cpp)
#

include(instructor_CMakeLists.txt OPTIONAL RESULT_VARIABLE instructor_cmakelists)

if (instructor_cmakelists)
message("DETECTED INSTRUCTOR CUSTOMIZATIONS in ${instructor_cmakelists}")
message("  custom_files: ${custom_files}")
else()
set (custom_files ${GRADINGCODE}/grading/empty_custom_function.cpp)
endif(instructor_cmakelists)


###################################################################################

# Use the C Pre-Processor to strip the C & C++ comments from config.json
get_filename_component(cc_dir ${CMAKE_C_COMPILER} PATH)
find_program(CPP_PATH cpp HINTS ${cc_dir} DOC "path to C preprocessor")
# Rather than passing -P to avoid the line markers, which also
# collapses blank lines, we pass nothing to preserve line number parity
# and remove the # lines.
execute_process(COMMAND ${CPP_PATH} ${my_config_json} OUTPUT_VARIABLE 
  json_generated RESULT_VARIABLE cpp_res ERROR_VARIABLE cpp_err)
if (cpp_res OR cpp_err)
  message(FATAL_ERROR "Failed to run ${CPP_PATH} on ${my_config_json}")
endif ()
# remove cpp # markers
string(REGEX REPLACE "(^|\n)#[^\n]*\n" "" json_generated "${json_generated}")
# write out a copy of the file without comments
file(WRITE "${my_config_json_no_comments}" "${json_generated}")


# Now run the comment-free version of the json file through a simple
# python json syntax checker
find_program(PYTHON_PATH python DOC "path to python")
execute_process(COMMAND ${PYTHON_PATH} ${GRADINGCODE}/grading/json_syntax_checker.py
  "${my_config_json_no_comments}" OUTPUT_QUIET RESULT_VARIABLE py_res ERROR_VARIABLE py_err)
if (py_res OR py_err)
  message(FATAL_ERROR "JSON syntax error found: ${py_err}")
endif ()


# Then embed the config.json within a generated .cpp source file
string(REGEX REPLACE "([\"\\\n])" "\\\\\\1" json_generated "${json_generated}")
set(cpp_header "const char *GLOBAL_config_json_string = \"")
set(cpp_footer "\";\n")
file(WRITE json_generated.cpp "${cpp_header}${json_generated}${cpp_footer}")
set_source_files_properties(json_generated.cpp PROPERTIES GENERATED true)


###################################################################################
# source files

# build this as a library, so we only have to compile it once
add_library(custom_functions
  ${GRADINGCODE}/grading/seccomp_functions.cpp  
  json_generated.cpp
  ${custom_files}  
)

add_executable(configure.out
  ${GRADINGCODE}/grading/main_configure.cpp 
)

add_executable(compile.out
  ${GRADINGCODE}/grading/main_compile.cpp 
)

add_executable(run.out
  ${GRADINGCODE}/grading/main_runner.cpp 
)

add_executable(validate.out
  ${GRADINGCODE}/grading/main_validator.cpp 
)



###################################################################################

target_link_libraries(custom_functions seccomp boost_system boost_filesystem)
set_property(TARGET custom_functions APPEND_STRING PROPERTY COMPILE_FLAGS "-g -std=c++11")

target_link_libraries(configure.out  ${GRADINGLIB}  seccomp  custom_functions boost_system boost_filesystem)
target_link_libraries(compile.out    ${GRADINGLIB}  seccomp  custom_functions boost_system boost_filesystem)
target_link_libraries(run.out        ${GRADINGLIB}  seccomp  custom_functions boost_system boost_filesystem)
target_link_libraries(validate.out   ${GRADINGLIB}  seccomp  custom_functions boost_system boost_filesystem)

set_property(TARGET configure.out APPEND_STRING PROPERTY COMPILE_FLAGS "-g -std=c++11")
set_property(TARGET compile.out   APPEND_STRING PROPERTY COMPILE_FLAGS "-g -std=c++11")
set_property(TARGET run.out       APPEND_STRING PROPERTY COMPILE_FLAGS "-g -std=c++11")
set_property(TARGET validate.out  APPEND_STRING PROPERTY COMPILE_FLAGS "-g -std=c++11")

include_directories(${MY_DIR})
include_directories(${GRADINGCODE})
include_directories(${GRADINGCODE}/grading)

SET(EXECUTABLE_OUTPUT_PATH ${my_bin})

add_custom_target(config_tgt ALL DEPENDS ${my_hw_config_file})
add_custom_command(OUTPUT ${my_hw_config_file} DEPENDS configure.out COMMAND ${my_bin}/configure.out ${my_hw_config_file})

###################################################################################


