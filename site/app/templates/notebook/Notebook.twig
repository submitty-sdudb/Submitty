

{% macro renderNotebook(notebook, testcase_messages, image_data, numberUtils, student_id, gradeable_id, highest_version, max_file_uploads, old_files) %}
<div class="notebook">

    {# Render content #}
    {% set num_short_answer = 0 %}
    {% set num_codeboxes = 0 %}
    {% set num_multiple_choice = 0 %}
    {% set num_file_submissions = 0 %}
    {% for cell in notebook %}
        <div id="content_{{ loop.index0 }}">

            {# Handle if cell is markdown #}
            {% if cell.type == "markdown" %}

                {# Render markdown #}
                {{ cell.markdown_data | markdown }}
                {{ _self.render_testcase_messages(cell, testcase_messages) }}

            {# Handle if cell is image #}
            {% elseif cell.type == "image" %}

                <img src="{{ attribute(image_data, cell.image) }}"

                {% if cell.width > 0 %}
                    width="{{ cell.width }}"
                {% endif %}

                {% if cell.height > 0 %}
                    height="{{ cell.height }}"
                {% endif %}

                {% if cell.alt_text is defined %}
                    alt="{{ cell.alt_text }}"
                {% endif %}

                >

                {{ _self.render_testcase_messages(cell, testcase_messages) }}

            {# Handle if cell is short_answer #}
            {% elseif cell.type == "short_answer" %}

                {# If programming language not defined render regular text boxes #}
                {% if cell.programming_language is not defined %}

                    {{ _self.render_short_answer(cell, num_short_answer, highest_version, testcase_messages) }}
                    {% set num_short_answer = num_short_answer + 1 %}

                {# Else render a codebox #}
                {% else %}
                        <div>
                            {% if cell.label %}
                                {{ cell.label | markdown }}
                            {% else %}
                                Write your {{ cell.programming_language | title }} below.  Press TAB to indent. Press ESC to advance from answer area.
                            {% endif %}
                        </div>

                        <div id="codebox_{{ num_codeboxes }}"
                             name="codebox_{{ num_codeboxes }}"
                             autocapitalization="off"
                             spellcheck="false"
                             class="codebox"
                             data-initial_value="{{ cell.initial_value }}"
                             data-recent_submission="{{ cell.recent_submission }}"
                             onkeyup="handle_input_keypress();">
                        </div>

                        <button type="button" id="codebox_{{ num_codeboxes }}_clear_button" class="btn btn-primary codebox-clear-reset">Clear</button>
                        <button type="button" id="codebox_{{ num_codeboxes }}_recent_button" class="btn btn-primary codebox-clear-reset">Use Most Recent Submission</button>

                        <script>
                            var editor_{{num_codeboxes}} = CodeMirror(document.getElementById("codebox_{{ num_codeboxes }}"),
                                {
                                    "mode": "{{- cell.codemirror_mode | escape('js') -}}",
                                    lineNumbers: true,
                                    "theme": "eclipse"
                                }
                            );

                            makeCodeMirrorAccessible(editor_{{ num_codeboxes }});

                            {% if cell.rows is defined and cell.rows > 0 %}
                                const height_{{ num_codeboxes }} = rowsToPixels({{ cell.rows }});
                                editor_{{ num_codeboxes }}.setSize(null, height_{{ num_codeboxes }});
                            {% endif %}

                            {# Populate codebox and set state of buttons initially #}
                            {% if highest_version == 0 %}
                                setCodeBox("codebox_{{ num_codeboxes }}", "clear");
                                document.getElementById("codebox_{{ num_codeboxes }}_clear_button").disabled = true;
                                document.getElementById("codebox_{{ num_codeboxes }}_recent_button").style.visibility = 'hidden';
                            {% else %}
                                setCodeBox("codebox_{{ num_codeboxes }}", "recent");
                                document.getElementById("codebox_{{ num_codeboxes }}_clear_button").disabled = false;
                                document.getElementById("codebox_{{ num_codeboxes }}_recent_button").disabled = true;
                            {% endif %}
                        </script>
                    {% set num_codeboxes = num_codeboxes + 1 %}
                {% endif %}

            {# Handle if cell is multiple choice #}
            {% elseif cell.type == "multiple_choice" %}
                {% if cell.randomize_order == true %}
                    {% set choices_indices = numberUtils.getRandomIndices(cell.choices|length, student_id, gradeable_id ) %}
                {% else %}
                    {% set choices_indices = cell.choices|keys %}
                {% endif %}

                <fieldset id="mc_field_{{ num_multiple_choice }}"
                          class="mc"
                          {% if cell.recent_submission is defined %}data-prev_checked="{{ cell.recent_submission }}"{% endif %}>
                    {% if cell.allow_multiple == true %}
                        <legend>
                            {% if cell.label %}
                                {{ cell.label | markdown }}
                            {% else %}
                                You may select many:
                            {% endif %}
                        </legend>

                        {{ _self.render_testcase_messages(cell, testcase_messages) }}

                        {% for idx in choices_indices %}
                            <label for="multiple_choice_{{ num_multiple_choice }}_{{ loop.index0 }}">

                                <input type="checkbox" class="key_to_click" tabindex="0"
                                       name="multiple_choice_{{ num_multiple_choice }}"
                                       id="multiple_choice_{{ num_multiple_choice }}_{{ loop.index0 }}"
                                       value="{{ cell.choices[idx].value }}"
                                       onclick="handle_input_keypress();"
                                />
                                {{ cell.choices[idx].description | markdown }}
                            </label>
                        {% endfor %}
                    {% else %}
                        <legend>
                            {% if cell.label %}
                                {{ cell.label | markdown }}
                            {% else %}
                                Select one:
                            {% endif %}
                        </legend>

                        {{ _self.render_testcase_messages(cell, testcase_messages) }}

                        {% for idx in choices_indices %}
                            <label for="multiple_choice_{{ num_multiple_choice }}_{{ loop.index0 }}">
                                <input type="radio" class="key_to_click" tabindex="0"
                                       name="multiple_choice_{{ num_multiple_choice }}"
                                       id="multiple_choice_{{ num_multiple_choice }}_{{ loop.index0 }}"
                                       value="{{ cell.choices[idx].value }}"
                                       onclick="handle_input_keypress();"
                                />
                                {{ cell.choices[idx].description | markdown }}
                            </label>
                        {% endfor %}
                    {% endif %}
                </fieldset>

                {# Create reset to recent submission button #}
                <button type="button" id="mc_{{ num_multiple_choice }}_clear_button" class="btn btn-primary mc-clear">Clear</button>
                <button type="button" id="mc_{{ num_multiple_choice }}_recent_button" class="btn btn-primary mc-recent">Use Most Recent Submission</button>

                <script>
                    {# Populate checkboxes initially #}
                    {% if cell.recent_submission is defined %}
                        setMultipleChoices("mc_field_{{ num_multiple_choice }}");
                    {% endif %}

                    {# Configure initial state for the button #}
                    {% if highest_version == 0 %}
                        $("#mc_{{ num_multiple_choice }}_clear_button").attr("disabled", true);
                        $("#mc_{{ num_multiple_choice }}_recent_button").hide();
                    {% else %}
                        $("#mc_{{ num_multiple_choice }}_clear_button").attr("disabled", false);
                        $("#mc_{{ num_multiple_choice }}_recent_button").attr("disabled", true);
                    {% endif %}
                </script>

                {% set num_multiple_choice = num_multiple_choice + 1 %}

            {% elseif cell.type == "file_submission" %}
                {% set num_file_submissions = num_file_submissions + 1 %}

                {{ _self.renderFileSubmission(max_file_uploads,num_file_submissions, old_files, cell.label) }}

                <button type="button" class="btn btn-primary 
                    sa-clear-reset" onclick="deleteFiles({{num_file_submissions}});"> 
                    Clear
                </button>

                <button type="button" 
                    onclick="populatePreviousFiles({{num_file_submissions}});"
                    class="btn btn-primary mc-recent fs-recent">Use Most Recent Submission
                </button>
            {% endif %}

        </div>

    {% endfor %}

</div>

<script>
    function populatePreviousFiles(part){
        let prev_files = {
            {% for file in old_files %}
                {{file.part}} : {'name' : '{{file.name}}', 'size' : '{{file.size}}' },
            {% endfor %}
        };


        let tgt = prev_files[part];
        if (typeof tgt === "undefined"){
            return;
        }

        deleteFiles(part);
        addLabel(tgt['name'], tgt['size'], part);
        readPrevious(tgt['name'], part);
        setUsePrevious();
    }


    $(function(){
        createArray({{ num_file_submissions }});

        {% for file in old_files %}
            addLabel('{{ file.name }}', '{{ file.size }}', {{ file.part }}, true);
            readPrevious('{{ file.name }}', {{ file.part }});
        {% endfor %}
        setUsePrevious();

        {% if old_files | length == 0 %}
            let btns = document.getElementsByClassName("fs-recent");
            for (let btn of btns){
                btn.disabled = true;
            }
        {% endif %}
    });
</script>

{% endmacro %}


{% macro render_testcase_messages(cell, testcase_messages) %}

    {# If testcase_ref is set then attempt to display associated messages #}
    {% if cell.testcase_ref is defined %}

        {% if testcase_messages[cell.testcase_ref] is defined %}

            {% for msg in testcase_messages[cell.testcase_ref] %}
                <p class="feedback-msg-{{ msg.type }}">{{ msg.message }}</p>
            {% endfor %}

        {% endif %}

    {% endif %}

{% endmacro %}


{% macro render_short_answer(short_answer, index, version, testcase_messages) %}
    <p class="short-answer">
        {% if short_answer.rows == 0 %}
            <label>
                <div>
                    {% if short_answer.label %}
                        {{ short_answer.label | markdown }}
                    {% else %}
                        Write your answer below:
                    {% endif %}
                </div>

                {{ _self.render_testcase_messages(short_answer, testcase_messages) }}

                <input
                    type="text"
                    name="short_answer_{{ index }}"
                    autocapitalization="off"
                    spellcheck="false"
                    id="short_answer_{{ index }}"
                    class="sa-box"
                    data-initial_value="{{ short_answer.initial_value }}"
                    data-recent_submission="{{ short_answer.recent_submission }}"
                    {% if short_answer.recent_submission|length  %}
                        value="{{ short_answer.recent_submission }}"
                    {% else %}
                        value="{{ short_answer.initial_value }}"
                    {% endif %}
                    onkeyup="handle_input_keypress();"
                />
            </label>
        {% else %}
            <label>
                <div>
                    {% if short_answer.label %}
                        {{ short_answer.label | markdown }}
                    {% else %}
                        Write your answer below.
                    {% endif %}
                    Press <kbd>TAB</kbd> to indent. Press <kbd>ESC</kbd> to advance from textarea.
                </div>

                {{ _self.render_testcase_messages(short_answer, testcase_messages) }}

                {# Single line to prevent whitespace from being captured #}
                <textarea
                    rows="{{ short_answer.rows }}"
                    cols="50"
                    name="short_answer_{{ index }}"
                    id="short_answer_{{ index }}"
                    class="sa-box"
                    data-initial_value="{{ short_answer.initial_value }}"
                    data-recent_submission="{{ short_answer.recent_submission }}"
                    onkeyup="handle_input_keypress()"
                >{% if short_answer.recent_submission|length  %}{{ short_answer.recent_submission }}{% else %}{{ short_answer.initial_value }}{% endif %}</textarea>
            </label>
            {#
                Allow tab in the larger text boxes (normally tab moves to the next textbox)
                http://stackoverflow.com/questions/6140632/how-to-handle-tab-in-textarea

                q.v. function enableTabsInTextArea(jQuerySelector) in server.js
            #}
            <script>
                enableTabsInTextArea('#short_answer_{{ index }}');
            </script>
        {% endif %}
        <button type="button" id="short_answer_{{ index }}_clear_button" class="btn btn-primary sa-clear-reset">Clear</button>
        <button type="button" id="short_answer_{{ index }}_recent_button" class="btn btn-primary sa-clear-reset">Use Most Recent Submission</button>
        <script>

            // Setup init state of buttons
            {% if version == 0 %}
                document.getElementById("short_answer_{{ index }}_clear_button").disabled = true;
                document.getElementById("short_answer_{{ index }}_recent_button").style.visibility = 'hidden';
            {% else %}
                document.getElementById("short_answer_{{ index }}_clear_button").disabled = false;
                document.getElementById("short_answer_{{ index }}_recent_button").disabled = true;
            {% endif %}

        </script>
    </p>
{% endmacro %}

{# File submission for notebooks #}
{% macro renderFileSubmission(max_file_uploads, index, old_files, label) %}
    <div id="upload-boxes">
        {# uploadIndex and input-file + Index required for drag-and-drop.js #}
        <div tabindex="0"
             id="upload{{index}}"
             class="upload-box"
             onkeypress="clicked_on_box(event)"
             role="text"
             aria-label="Press enter to upload your part {{ index }} file"
        >
            <h2 class="label" id="label{{index}}">
                Drag your {{ label }} file(s) here or click to open file browser
            </h2>
            <input type="file" name="files" id="input-file{{index}}" 
                   class="hide" onchange="addFilesFromInput({{index}})"
                   multiple aria-label="Select Files to upload" 
            />
            <table class="file-upload-table" id="file-upload-table-{{index}}">
            <tr style="background:transparent; display:none;">
                <th>File Name:</th>
                <th>Size:</th>
            </tr>
            </table>
            <p>Maximum allowed number of files to be uploaded is {{ max_file_uploads }}.</p>
        </div>
    </div>

    <script>
        $(function(){
            //initialize the dropzone just created
            initMaxNoFiles({{max_file_uploads}});
            initializeDropZone("upload{{ index }}");
        });
    </script>
{% endmacro %}
