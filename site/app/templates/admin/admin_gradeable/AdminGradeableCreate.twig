{#
    Combo box for choosing an existing gradeable as a template for the new one
        (Only show this option if we aren't in edit mode).
#}
{% if action == 'new' or action == 'template' %}
    <div>
        <label for="gradeable_template">From Template:</label>
        <select name="gradeable_template" id="gradeable_template" style='width: 400px;'>
            <option>--None--</option>

            {% for template in template_list %}
                <option {{ action != 'new' and gradeable.getId() == template.g_id ? 'selected' : '' }}
                    value="{{ template.g_id }}">{{ template.g_title }}</option>
            {% endfor %}
        </select>
    </div>
{% endif %}

{#
    Primary Form
#}
<!-- Gradeable Title (read/write in all modes) -->
<label for="g_title">What is the title of this gradeable?:</label>
    <input style='width: 350px' type='text' name='title' id='g_title' class="required auto_save"
        value="{{ action != 'new' ? gradeable.getTitle() : '' }}" placeholder="(Required)" required/>

<br />

<!-- Instruction URL (read/write in all modes) -->
<label for="instructions_url">What is the URL to the assignment instructions? (shown to student)</label>
    <input style='width: 350px' type='text' name='instructions_url' id='instructions_url' class="auto_save"
        value="{{ action != 'new' ? gradeable.getInstructionsUrl() : '' }}" placeholder="(Optional)" />

<br />

<!-- Gradeable ID (readonly in edit mode, required) -->
<label for="g_id">>What is the unique id of this gradeable? (e.g., <kbd>hw01</kbd>, <kbd>lab_12</kbd>, or <kbd>midterm</kbd>):</label>
<input style='width: 350px' type='text' name='id' id="g_id" class="required"
       value="{{ action != 'new' ? gradeable.getId() : '' }}" placeholder="(Required)"
        {{ action == 'edit' ? 'readonly' : 'required' }} />

<br />

{% if action == 'new' or action == 'template' %}
    <!-- Gradeable Type radio buttons (readonly in edit mode) -->
    What is the <a target=_blank href="http://submitty.org/instructor/create_edit_gradeable#types-of-gradeables">type of the gradeable</a>?:

    <span id="required_type" >(Required)</span>
{% else %}
    Gradeable type: <span id="gradeable-type-string">{{ type_string }}</span>
    <br />
{% endif %}
<div>
    <div id="gradeable_type_container" {{ action == 'edit' ? 'hidden' : '' }}>
        <div>
            <input type='radio' id="radio_checkpoints" name="type" value="Checkpoints"
                {{ action != 'new' and gradeable.getType() == 1 ? 'checked' : '' }}> {{ gradeable_type_strings['checkpoint'] }}
        </div>

        <div>
            <input type='radio' id="radio_numeric" name="type" value="Numeric"
                {{ action != 'new' and gradeable.getType() == 2 ? 'checked' : '' }}> {{ gradeable_type_strings['numeric'] }}
        </div>

        <div hidden>
            <input type='radio' id="radio_electronic_file" name="type" value="Electronic File"
                    {{ action != 'new' and gradeable.getType() == 0 ? 'checked' : '' }}> Electronic File (multiple types)
        </div>

        {# Real input fields to back the exposed configurations options #}
        <input name="scanned_exam" value="{{ action != 'new' and gradeable.isScannedExam() ? 'true' : 'false' }}" hidden>
        <input name="vcs" value="{{ action != 'new' and gradeable.isVcs() ? 'true' : 'false' }}" hidden>

        <div>
            <input class="ignore" type="radio" id="radio_ef_student_upload" name="electronic_gradeable_presets" value="normal"
                    {{ action != 'new' and not gradeable.isScannedExam() and not gradeable.isVcs() ? 'checked' : ''}}> {{ gradeable_type_strings['electronic_hw'] }}
        </div>

        <div>
            <input class="ignore" type="radio" id="radio_ef_vcs_upload" name="electronic_gradeable_presets" value="vcs"
                    {{ action != 'new' and not gradeable.isScannedExam() and gradeable.isVcs() ? 'checked' : ''}}> {{ gradeable_type_strings['electronic_hw_vcs'] }}
        </div>

        <div>
            <input class="ignore" type="radio" id="radio_ef_scanned_exam" name="electronic_gradeable_presets" value="scanned_exam"
                    {{ action != 'new' and gradeable.isScannedExam() ? 'checked' : '' }}> {{ gradeable_type_strings['electronic_exam'] }}
        </div>
    </div>
</div>

<!-- This is only relevant to Electronic Files -->
<fieldset class="gradeable_type_options electronic_file" id="electronic_file">
    <div><legend>Will any or all of this assignment be manually graded (e.g., by the TAs or the instructor)?</legend></div>
    <div>
        <input type="radio" id="yes_ta_grade" name="ta_grading" value="true" class="bool_val auto_save date-related"
                {{ action != 'new' and gradeable.getTaGrading() ? 'checked' : '' }} /> <label for="yes_ta_grade">Yes</label>
        <input type="radio" id="no_ta_grade" name="ta_grading" value="false" class="bool_val auto_save date-related"
                {{ not (action != 'new' and gradeable.getTaGrading()) ? 'checked' : '' }} /> <label for="no_ta_grade">No</label>
    </div>
    {% if regrade_enabled %}
        <div id="regrade_request_enable_container">
            Will grade inquiries be enabled for this assignment?
            <br />
            <input type="radio" id="yes_regrade_allowed" name="regrade_allowed" value="true" class="bool_val auto_save date-related"
                    {{ action != 'new' and gradeable.isRegradeAllowed() ? 'checked' : '' }} /> Yes
            <input type="radio" id="no_regrade_allowed" name="regrade_allowed" value="false" class="bool_val auto_save date-related"
                    {{ not (action != 'new' and gradeable.isRegradeAllowed()) ? 'checked' : '' }} /> No
        </div>
    {% endif %}

    <div id="team-settings-container">
        {% if action == 'new' or action == 'template' %}
            Is this a team assignment?
        {% else %}
            Team Settings:
            {{ gradeable.isTeamAssignment() ? '' : ' This is an individual assignment' }}
        {% endif %}
        <div style="{{ action == 'edit' ? 'display:none' : '' }}">
            <input type="radio" id = "team_yes_radio" name="team_assignment" value="true"
                    {{ action != 'new' and gradeable.isTeamAssignment() ? 'checked' : '' }}> <label for="team_yes_radio">Yes</label>

            <input type="radio" id = "team_no_radio" name="team_assignment" value ="false"
                    {{ not (action != 'new' and gradeable.isTeamAssignment()) ? 'checked' :  '' }}> <label for="team_no_radio">No</label>
        </div>
    </div>

    <!-- Team settings (read only in edit mode) -->
    <div class="team_assignment team_yes" id="team_yes">

        <label for="team_size_max">What is the maximum team size?</label>
            <input style="width: 50px" name="team_size_max" id="team_size_max" class="int_val auto_save" type="text"
                   value="{{ action != 'new' ? gradeable.getTeamSizeMax() : '3' }}"/>

        {#Use teams from a previous gradeable:
        <!-- Inherit teams from another gradeable? -->
        <br />

            <!--Use a combo box if we can edit the value, otherwise show a text box (readonly)-->

        {% if action == 'new' %}
            <select id='gradeable_teams' name="eg_inherit_teams_from" style='width: 170px;'
                value='{{ admin_gradeable.getEgInheritTeamsFrom() }}'>
                <option value=''>--None--</option>

                {% for parent in inherit_teams_list %}
                    <option {{ admin_gradeable.getEgInheritTeamsFrom() == parent.g_id ? 'selected' : '' }}
                        value="{{ parent.g_id }}">{{ parent.g_title }}</option>
                {% endfor %}
            </select>
        {% else %}
            <input id='gradeable_teams_read' name='gradeable_teams_read' style='width=170px'
                value='{{ admin_gradeable.getEgInheritTeamsFrom() }}' readonly/>
        {% endif %}
        #}
    </div>

    <div id="repository">
        <h3>Path for the Version Control System (VCS) repository:</h3>

        VCS base URL (from Course Settings): <kbd>{{ vcs_base_url }}</kbd><br /><br />

        <b>Specify the remainder of the VCS URL</b>, for example one of the following:<br />
        <kbd>&#123;&#36;gradeable_id&#125;/&#123;&#36;user_id&#125;</kbd><br />
        <kbd>&#123;&#36;gradeable_id&#125;/&#123;&#36;team_id&#125;</kbd><br />
        <kbd>final_project/&#123;&#36;user_id&#125;</kbd><br />
        <br />

        <b>Or specify the complete url/path</b>, for example:<br />
        <kbd>https://github.com/test-course/&#123;&#36;gradeable_id&#125;/&#123;&#36;repo_id&#125;</kbd>
        <br /><br />

        <b>Or if the entire URL will be provided by the student</b>, then leave this input blank.
        <br /><br />

        <em>Note: The following string variables will be replaced:</em><br />
        <ul style="list-style-position: inside;">
           <li><kbd>&#123;&#36;vcs_type&#125;</kbd></li>
           <li><kbd>&#123;&#36;gradeable_id&#125;</kbd></li>
           <li><kbd>&#123;&#36;user_id&#125;</kbd> OR <kbd>&#123;&#36;team_id&#125;</kbd> OR <kbd>&#123;&#36;repo_id&#125;</kbd> (use only one)</li>
        </ul>
        <br />

        <input style='width: 83%' type='text' id="subdirectory" name='vcs_subdirectory' class="auto_save"
               value="{{ action != 'new' ? gradeable.getVcsSubdirectory() : '' }}" placeholder="(Optional)"/><br />
        <br />

        FULL VCS URL: <kbd id="vcs_url"></kbd>
    </div>
</fieldset>

<!-- Gradeable bucket (read/write in all modes) -->
<label for="syllabus_bucket">What <a target=_blank href="http://submitty.org/instructor/rainbow_grades">syllabus category</a> does this item belong to?:</label>

<select name="syllabus_bucket" id="syllabus_bucket" class="auto_save" style="width: 170px;">
    {% for bucket in syllabus_buckets %}
        <option value="{{ bucket }}" {{ action != 'new' and gradeable.getSyllabusBucket() == bucket ? 'selected' : '' }}>
            {{ bucket | title }}
        </option>
    {% endfor %}
</select>

<br />
{% if action == 'new' or action == 'template' %}
   <br />
   <em>Note: After pressing the "Create New Gradeable" button you may not change: <br />
   <ul style="margin-left:10px">
   <li style="margin-left:15px"> the unique id,</li>
   <li style="margin-left:15px"> gradeable type (electronic file upload, checkpoints, or text), </li>
   <li style="margin-left:15px"> whether the students will submit as individuals or team, and </li>
   <li style="margin-left:15px"> whether the students will submit by directly uploading files or by version control. </li>
   </ul>
   All other settings for this gradeable may be edited.</em>
   <br /><br />
   <button class="btn btn-primary" type="submit" style="margin-left:10px;">Create New Gradeable</button>
{% endif %}


<div id="alert-message" title="WARNING">
    <p>Gradeable ID must not be blank and only contain characters <strong> a-z A-Z 0-9 _ - </strong> </p>
</div>

<script type="text/javascript">
    function updateDateDisplay() {
        let elecDateBoxes = $('.electronic_file_dates input');
        elecDateBoxes.prop('disabled', true);
        if ($('#radio_electronic_file').is(':checked')) {
            elecDateBoxes.prop('disabled', false);
            $('.manual_grading_dates input').prop('disabled', $('#no_ta_grade').is(':checked'));
            $('#date_team_lock').prop('disabled', {{ gradeable.isTeamAssignment() ? 'false' : 'true' }});
            $('#late_days').prop('disabled', $('#no_late_submission').is(':checked'));

            {# Use this 'each' trick since 'no_regrade_allowed' may not be defined if grade inquiries are not enabled #}
            let regradeReqDate = $('#date_regrade_request');
            regradeReqDate.prop('disabled', true);
            $('#no_regrade_allowed').each(function () {
                regradeReqDate.prop('disabled', $(this).is(':checked'));
            });
        }
        $('#hide_dates').hide();
        $('#show_all_dates').show();
    }

    //
    // Event Handlers
    //
    function onGradeableTypeChange() {
        // Hide red text once user selects an option
        if($('#radio_electronic_file').is(':checked') ||
           $('#radio_checkpoints').is(':checked') ||
           $('#radio_numeric').is(':checked')) {
               $('#required_type').hide();
        }

        if(!$('#radio_electronic_file').is(':checked')) {
            $('input[name=scanned_exam]').prop('checked', false);
        }

        disableElementChildren('.electronic_file');
        disableElementChildren('.checkpoints');
        disableElementChildren('.numeric');

        // Display the correct options for all forms depending
        //  on gradeable type
        if($('#radio_electronic_file').is(':checked')) {
            disableElementChildren('.electronic_file', false);
            $('#page_1_nav').show();
            onManualGradingChange();
            if ($('input[name=electronic_gradeable_presets]:checked').length === 0) {
                $('input[name=electronic_gradeable_presets][value=normal]').prop('checked', true);
            }
        }
        else {
            $('input[name=electronic_gradeable_presets]').prop('checked', false);
            if ($('#radio_checkpoints').is(':checked')) {
                disableElementChildren('.checkpoints', false);
            }
            else if ($('#radio_numeric').is(':checked')) {
                disableElementChildren('.numeric', false);
            }
        }
    }

    function onTeamAssignmentChange() {
        if($('#team_yes_radio').is(':checked')) {
            // $('.team_yes').show();
            disableElementChildren('.team_yes', false);
        }
        else {
            // $('.team_yes').hide();
            disableElementChildren('.team_yes', true);
        }
    }

    function onManualGradingChange() {
        if($('#yes_ta_grade').is(':checked') || !$('#radio_electronic_file').is(':checked')) {
            // $('.manual_grading').show();
            disableElementChildren('.manual_grading', false);
            disableElementChildren('.no_manual_grading', true);
        }
        else {
            // $('.manual_grading').hide();
            disableElementChildren('.manual_grading', true);
            disableElementChildren('.no_manual_grading', false);
        }
        updateDateDisplay();
    }

    function onVcsSubdirChange() {
        setVcsUrl($('#subdirectory').val());
    }

    function onIsRegradeAllowedChange() {
        if ($('#yes_regrade_allowed').is(':checked')) {
            //   $('.regrade_request_date').hide();
            disableElementChildren('.regrade_request_date', false);
        }
        else {
            //   $('.regrade_request_date').show();
            disableElementChildren('.regrade_request_date', true);
        }
        updateDateDisplay();
    }

    function onLateSubmissionAllowedChanged() {
        let lateSubmissionParts = $('.yes-late-submission');
        if($('#yes_late_submission').is(':checked')) {
            lateSubmissionParts.show();
        } else {
            lateSubmissionParts.hide();
        }
        updateDateDisplay();
    }

    var vcs_base_url = "{{ vcs_base_url }}";
    function setVcsUrl(subdirectory) {
        if (subdirectory.indexOf('://') > -1 || subdirectory[0] == '/') {
            $('#vcs_url').text(subdirectory);
        }
        else {
            $('#vcs_url').text(vcs_base_url.replace(/[\/]+$/g, '') + '/' + subdirectory);
        }
    }

    $(function () {
        $('#subdirectory').on('change paste keyup', function() {
            setVcsUrl(this.value);
        });
        setVcsUrl($('#subdirectory').val());
    });

    $(function () {
        $("#alert-message").dialog({
            modal: true,
            autoOpen: false,
            buttons: {
                Ok: function () {
                    $(this).dialog("close");
                }
            }
        });
    });

    $(document).ready(function() {

        onManualGradingChange();
        $('[name="ta_grading"]').change(onManualGradingChange);

        //
        // Template Selector Box Events
        //

        // Event handler for the gradeable template selection change
        $('[name="gradeable_template"]').change(
        function() {
            // TODO: what if this.value === ''?
            let arrayUrlParts = [];
            arrayUrlParts["component"]   = ["admin"];
            arrayUrlParts["page"]        = ["admin_gradeable"];
            arrayUrlParts["action"]      = ["upload_new_template"];
            arrayUrlParts["template_id"] = [this.value];

            // Redirect user to the same page, but in the process,
            //  fetch the data from the template gradeable
            window.location.href = buildUrl(arrayUrlParts);
        });

        //
        // Gradeable Type Radio Button Events
        //

        // Hide team settings if it isn't a electronic gradeable
        onGradeableTypeChange();
        $('[name="type"]').change(onGradeableTypeChange);

        // Hide team settings if team's are not the selected option
        onTeamAssignmentChange();
        $('[name="team_assignment"]').change(onTeamAssignmentChange);

        disableElementChildren('#repository', $('input[name=vcs]').val() === 'false');

        // Update the electronic file subtype
        $('input[name=electronic_gradeable_presets]').change(function() {
            $('#radio_electronic_file').prop('checked', true);
            onGradeableTypeChange();
            let vcs = $('input[name=vcs]');
            let scannedExam = $('input[name=scanned_exam]');

            vcs.val('false');
            $('#repository').hide();
            if ($(this).val() === 'scanned_exam') {
                scannedExam.val('true');
            } else {
                scannedExam.val('false');
                if ($(this).val() === 'vcs') {
                    vcs.val('true');
                    $('#repository').show();
                } else {
                }
            }
            vcs.change();
            scannedExam.change();
        });

        // Upload the vcs url in real time
        onVcsSubdirChange();
        $('#subdirectory').keypress(onVcsSubdirChange);
        $('#subdirectory').keyup(onVcsSubdirChange);

        //Hide Grade Inquiry Date if Grade Inquiries are not enabled
        onIsRegradeAllowedChange();
        $('[name="regrade_allowed"]').change(onIsRegradeAllowedChange);

        onLateSubmissionAllowedChanged();
        $('input[name=late_submission_allowed]').change(onLateSubmissionAllowedChanged);
    });

    function checkForm() {
        var gradeable_id = $('#g_id').val();
        var gradeable_title = $('#g_title').val();
        var has_space = gradeable_id.includes(" ");
        var test = /^[a-zA-Z0-9_-]*$/.test(gradeable_id);

        var check1 = $('#radio_electronic_file').is(':checked');
        var check2 = $('#radio_checkpoints').is(':checked');
        var check3 = $('#radio_numeric').is(':checked');


        {% if action != 'edit' %}
            var all_gradeable_ids = {{ template_list|json_encode|raw }};
            if(all_gradeable_ids.find(element => element.g_id === gradeable_id)) {
                alert("Gradeable already exists");
                return false;
            }
        {% endif %}
        if (!test || has_space || gradeable_id == "" || gradeable_id === null) {
            $( "#alert-message" ).dialog( "open" );
            return false;
        }

        if (gradeable_title == '' || gradeable_title === null) {
            alert("A name for the gradeable must be assigned");
            return false;
        }

        if(!check1 && !check2 && !check3) {
            alert("A type of gradeable must be selected");
            return false;
        }

        var subdirectory = $('#subdirectory').val();
        var vcs_url = $('#vcs_url').text();

        if ($('repository_radio').is(':checked')) {
            var subdirectory_parts = subdirectory.split("{");
            // if this is a vcs path extension, make sure it starts with '/'
            console.log(vcs_url);
            if (vcs_url.indexOf('://') === -1 && vcs_url[0] !== "/") {
                alert("VCS path needs to either be a URL or start with a /");
                return false;
            }
            // check that path is made up of valid variables
            var allowed_variables = ["\$gradeable_id", "\$user_id", "\$team_id", "\$repo_id"];
            var used_id = false;
            for (var x = 1; x < subdirectory_parts.length; x++) {
                var subdirectory_part = subdirectory_parts[x].substring(0, subdirectory_parts[x].lastIndexOf("}"));
                if (allowed_variables.indexOf(subdirectory_part) === -1) {
                    alert("For the VCS path, '" + subdirectory_part + "' is not a valid variable name.")
                    return false;
                }
                if (!used_id && ((subdirectory_part === "\$user_id") || (subdirectory_part === "\$team_id") || (subdirectory_part === "\$repo_id"))) {
                    used_id = true;
                    continue;
                }
                if (used_id && ((subdirectory_part === "\$user_id") || (subdirectory_part === "\$team_id") || (subdirectory_part === "\$repo_id"))) {
                    alert("You can only use one of \$user_id, \$team_id and \$repo_id in VCS path");
                    return false;
                }
            }

        }

        return true;
    }

</script>
