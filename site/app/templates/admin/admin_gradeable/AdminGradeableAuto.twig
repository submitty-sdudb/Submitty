<div class="electronic_file">
    <b>Full path to the directory containing the autograding config.json file:</b><br>
    <fieldset>
        <input type="radio" class="config_option ignore" name="config_option" value="defaults"/> Default configs
        <input type="radio" class="config_option ignore" name="config_option" value="uploaded"/> Uploaded configs
        {% if repo_name != "" %}
            <input type="radio" class="config_option ignore" name="config_option" value="repo"/> Use Private repository ({{ config_repo_name }})
        {% endif %}
        <input type="radio" class="config_option ignore" name="config_option" value="manual"/> Provide full path
        <div class="div_select_config" id="div_default_configs" style="display: {{ config_select_mode == 'defaults' ? 'block' : 'none' }}">
            <select class="select_config_path ignore" id="select_default_config" style="width: 700px;">
                <option value=""></option>
                {% for path in default_config_paths %}
                    {% if config_select_mode == 'defaults' and path == gradeable.getAutogradingConfigPath() %}
                        <option value="{{ path }}" selected="selected">{{ path }}</option>
                    {% else %}
                        <option value="{{ path }}">{{ path }}</option>
                    {% endif %}
                {% endfor %}
            </select>
        </div>
        <div class="div_select_config" id="div_uploaded_configs" style="display: block">
            <select class="select_config_path ignore" id="select_uploaded_config" style="width: 700px;">
                <option value=""></option>
                {% for path in all_uploaded_config_paths %}
                    {% if config_select_mode == 'uploaded' and path == gradeable.getAutogradingConfigPath() %}
                        <option value="{{ path }}" selected="selected">{{ path }}</option>
                    {% else %}
                        <option value="{{ path }}">{{ path }}</option>
                    {% endif %}
                {% endfor %}
            </select>
            <a class="btn btn-primary" style="margin-top: 6px" href="{{ upload_config_url }}">Upload a config</a>
        </div>
        <div class="div_select_config" id="div_repository_configs" style="display: block">
            <select class="select_config_path ignore" id="select_repository_config" style="width: 700px;">
                <option value=""></option>
                {% for path in all_repository_config_paths %}
                    {% if config_select_mode == 'repo' and path == gradeable.getAutogradingConfigPath() %}
                        <option value="{{ path }}" selected="selected">{{ path }}</option>
                    {% else %}
                        <option value="{{ path }}">{{ path }}</option>
                    {% endif %}
                {% endfor %}
            </select>
        </div>
        <br />
        <p>Current config setting:</p>
        <input style='width: 83%' type='text' id='input_provide_full_path' name='autograding_config_path' value="{{ gradeable.getAutogradingConfigPath() }}" class="required" placeholder="(Required)"
                {{ config_select_mode != 'manual' ? 'disabled' : '' }}/>
    </fieldset>
    <br />

    Should students be able to view submissions?
    <fieldset>
        <input type="radio" id="yes_student_view" name="student_view" value="true"
                {{ gradeable.isStudentView() ? 'checked' : '' }}/> Yes
        <input type="radio" id="no_student_view" name="student_view" value="false"
                {{ not gradeable.isStudentView() ? 'checked' : '' }}/> No  &nbsp;&nbsp;&nbsp;
        (Select 'No' during grading of a bulk upload pdf quiz/exam.)

        <div id="student_submit_download_view">

            <br />
            Should students be able to make submissions? (Select 'No' if this is a bulk upload pdf quiz/exam.)
            <input type="radio" id="yes_student_submit" name="student_submit" value="true"
                    {{ gradeable.isStudentSubmit() ? 'checked' : '' }}/> Yes
            <input type="radio" id="no_student_submit" name="student_submit" value="false"
                    {{ not gradeable.isStudentSubmit() ? 'checked' : '' }}/> No
            <br /> <br />

            Should students be able to download submitted files? (Select 'Yes' to allow download of uploaded pdf quiz/exam.)
            <input type="radio" id="yes_student_download" name="student_download" value="true"
                    {{ gradeable.isStudentDownload() ? 'checked' : '' }}/> Yes
            <input type="radio" id="no_student_download" name="student_download" value="false"
                    {{ not gradeable.isStudentDownload() ? 'checked' : '' }}/> No
            <br /> <br />

            Should students be able to view/download any version or just the active version ? (Select 'Active version only' if this is an uploaded pdf quiz/exam.)
            <input type="radio" id="yes_student_any_version" name="student_download_any_version" value="true"
                    {{ gradeable.isStudentDownloadAnyVersion() ? 'checked' : '' }}/> Any version
            <input type="radio" id="no_student_any_version" name="student_download_any_version" value="false"
                    {{ not gradeable.isStudentDownloadAnyVersion() ? 'checked' : '' }}/> Active version only

        </div>
        <br />
    </fieldset>
    <br />
    <a class="btn btn-primary" href="{{ core.buildUrl({ 'component': 'admin', 'page': 'admin_gradeable', 'action': 'rebuild_assignment', 'id': gradeable.getId() }) }}">Rebuild Gradeable</a>
    <br /> <br />
    <h3>Build log:</h3>
    {% if cmake_output is null %}
        <pre>There is currently no build output.</pre>
    {% else %}
        <pre>{{ cmake_output|raw }}</pre>
    {% endif %}

</div>

<script type="text/javascript">
    var blankQuestion =
        {
            'id': 'NEW',
            'title': '',
            'ta_comment': '',
            'student_comment': ''
        };

    function onPdfChange() {
        if($('#yes_pdf_page').is(':checked')) {
            // $('#pdf_page').show();
            // $('.pdf_page_input').show();
            disableElementChildren('#pdf_page', false);
            disableElementChildren('.pdf_page_input', $('#yes_pdf_page_student').is(':checked'));
        }
        else {
            // $('#pdf_page').hide();
            // $('.pdf_page_input').hide();
            disableElementChildren('#pdf_page', true);
            disableElementChildren('.pdf_page_input', true);
        }
    }

    function onConfigChange(){
        let checked_val = $('input[name=config_option]:checked').val();
        let manual_input = $('#input_provide_full_path');
        $('.div_select_config').hide();
        let input = '#input_provide_full_path';
        if(checked_val === 'defaults') {
            $('#div_default_configs').show();
            input = "#select_default_config";
        } else if(checked_val === 'uploaded'){
            $('#div_uploaded_configs').show();
            input = "#select_uploaded_config";
        } else if(checked_val === 'repo'){
            $('#div_repository_configs').show();
            input = "#select_repository_config";
        } else {
            manual_input.prop('disabled', false);
            return;
        }
        manual_input.prop('disabled', true);

        // If the select box has the value, select it
        if($(input + ' option[value="' + manual_input.val() + '"]').length > 0) {
            $(input).val(manual_input.val());
        } else {
            $(input).val('');
        }
    }

    function onConfigPathChange() {
        let checked_val = $('input[name=config_option]:checked').val();
        let manual_input = $('#input_provide_full_path');
        if (checked_val === 'defaults') {
            manual_input.val($('#select_default_config').val());
            manual_input.change();
        } else if (checked_val === 'uploaded') {
            manual_input.val($('#select_uploaded_config').val());
            manual_input.change();
        } else if (checked_val === 'repo') {
            manual_input.val($('#select_repository_config_config').val());
            manual_input.change();
        }
    }

    function onStudentViewChange() {
        if($('#yes_student_view').is(':checked')) {
            //$('#student_submit_download_view').show();
            disableElementChildren('#student_submit_download_view', false);
        }
        else {
            // $('#student_submit_download_view').hide();
            disableElementChildren('#student_submit_download_view', true);
            $('#no_student_submit').prop('checked', true);
            $('#no_student_download').prop('checked',true);
            $('#yes_student_any_version').prop('checked',true);
            $('#student_submit_download_view').hide();
        }
    }

    $(document).ready(function() {

        // Hide PDF settings if not in use
        onPdfChange();
        $('[name="pdf_page"]').change(onPdfChange);

        // Hide PDF pages in Rubric if students assign them
        $('[name="pdf_page_student"]').change(onPdfChange);

        // Only show the settings if the setting is enabled
        onStudentViewChange();
        $('[name="student_view"]').change(onStudentViewChange);

        // Update the page when the radio buttons change
        $('input:radio[name=config_option][value="{{ config_select_mode }}"]').prop('checked', true);
        onConfigChange();
        $('.config_option').change(onConfigChange);

        // Update the text box when the path config changes
        $('.select_config_path').change(onConfigPathChange);

        {% if is_in_rebuild_queue %}
            checkRefreshPage("{{ check_refresh_url|raw }}");
        {% endif %}
    });
</script>